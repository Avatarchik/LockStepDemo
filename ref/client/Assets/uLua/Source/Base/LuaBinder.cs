using System;
using System.Collections.Generic;

public static class LuaBinder
{
	public static List<string> wrapList = new List<string>();
	public static void Bind(IntPtr L, string type = null)
	{
		if (type == null || wrapList.Contains(type)) return;
		wrapList.Add(type); type += "Wrap";
		switch (type) {
			case "ActivityConfigWrap": ActivityConfigWrap.Register(L); break;
			case "ActivityDataWrap": ActivityDataWrap.Register(L); break;
			case "AIConfigWrap": AIConfigWrap.Register(L); break;
			case "AnimationBlendModeWrap": AnimationBlendModeWrap.Register(L); break;
			case "AnimationClipWrap": AnimationClipWrap.Register(L); break;
			case "AnimationRespWrap": AnimationRespWrap.Register(L); break;
			case "AnimationStateWrap": AnimationStateWrap.Register(L); break;
			case "AnimationWrap": AnimationWrap.Register(L); break;
			case "AnimatorStateInfoWrap": AnimatorStateInfoWrap.Register(L); break;
			case "AnimatorWrap": AnimatorWrap.Register(L); break;
			case "AnnouncementConfigWrap": AnnouncementConfigWrap.Register(L); break;
			case "AnnouncementItemWrap": AnnouncementItemWrap.Register(L); break;
			case "ApplicationWrap": ApplicationWrap.Register(L); break;
			case "AssetBundleWrap": AssetBundleWrap.Register(L); break;
			case "AsyncOperationWrap": AsyncOperationWrap.Register(L); break;
			case "AttrDataWrap": AttrDataWrap.Register(L); break;
			case "AttributeTypeWrap": AttributeTypeWrap.Register(L); break;
			case "AttrNameConfigWrap": AttrNameConfigWrap.Register(L); break;
			case "AttrNameDataWrap": AttrNameDataWrap.Register(L); break;
			case "AudioClipWrap": AudioClipWrap.Register(L); break;
			case "AudioListenerWrap": AudioListenerWrap.Register(L); break;
			case "AudioManagerWrap": AudioManagerWrap.Register(L); break;
			case "AudioSourceWrap": AudioSourceWrap.Register(L); break;
			case "AwardConfigListWrap": AwardConfigListWrap.Register(L); break;
			case "AwardPackDataConfigWrap": AwardPackDataConfigWrap.Register(L); break;
			case "BadgeAttrBaseConfigWrap": BadgeAttrBaseConfigWrap.Register(L); break;
			case "BadgeAttrConfigDictionaryWrap": BadgeAttrConfigDictionaryWrap.Register(L); break;
			case "BadgeAttrConfigWrap": BadgeAttrConfigWrap.Register(L); break;
			case "BadgeBookListWrap": BadgeBookListWrap.Register(L); break;
			case "BadgeSlotBaseConfigDictionaryWrap": BadgeSlotBaseConfigDictionaryWrap.Register(L); break;
			case "BadgeSlotBaseConfigKeyValuePairWrap": BadgeSlotBaseConfigKeyValuePairWrap.Register(L); break;
			case "BadgeSlotBaseConfigWrap": BadgeSlotBaseConfigWrap.Register(L); break;
			case "BadgeSlotConfigWrap": BadgeSlotConfigWrap.Register(L); break;
			case "BadgeSlotListWrap": BadgeSlotListWrap.Register(L); break;
			case "BadgeSystemInfoWrap": BadgeSystemInfoWrap.Register(L); break;
			case "BaseDataBuyConfigWrap": BaseDataBuyConfigWrap.Register(L); break;
			case "BaseDataConfig2ListWrap": BaseDataConfig2ListWrap.Register(L); break;
			case "BaseDataConfig2Wrap": BaseDataConfig2Wrap.Register(L); break;
			case "BehaviourWrap": BehaviourWrap.Register(L); break;
			case "BlendWeightsWrap": BlendWeightsWrap.Register(L); break;
			case "BlockableWrap": BlockableWrap.Register(L); break;
			case "BoxColliderWrap": BoxColliderWrap.Register(L); break;
			case "BullFightConfigWrap": BullFightConfigWrap.Register(L); break;
			case "BullFightLevelDictionaryWrap": BullFightLevelDictionaryWrap.Register(L); break;
			case "BullFightLevelKeyValuePairWrap": BullFightLevelKeyValuePairWrap.Register(L); break;
			case "BullFightLevelWrap": BullFightLevelWrap.Register(L); break;
			case "BuyDataWrap": BuyDataWrap.Register(L); break;
			case "CameraClearFlagsWrap": CameraClearFlagsWrap.Register(L); break;
			case "CameraWrap": CameraWrap.Register(L); break;
			case "CareerConfigWrap": CareerConfigWrap.Register(L); break;
			case "ChapterConfigDictionaryWrap": ChapterConfigDictionaryWrap.Register(L); break;
			case "ChapterConfigKeyValuePairWrap": ChapterConfigKeyValuePairWrap.Register(L); break;
			case "ChapterDictionaryWrap": ChapterDictionaryWrap.Register(L); break;
			case "ChapterKeyValuePairWrap": ChapterKeyValuePairWrap.Register(L); break;
			case "ChapterWrap": ChapterWrap.Register(L); break;
			case "CharacterControllerWrap": CharacterControllerWrap.Register(L); break;
			case "ChatBroadcastListWrap": ChatBroadcastListWrap.Register(L); break;
			case "ChatBroadcastWrap": ChatBroadcastWrap.Register(L); break;
			case "ChatContentWrap": ChatContentWrap.Register(L); break;
			case "ClientWrap": ClientWrap.Register(L); break;
			case "ColliderWrap": ColliderWrap.Register(L); break;
			case "CommonConfigWrap": CommonConfigWrap.Register(L); break;
			case "CommonFunctionWrap": CommonFunctionWrap.Register(L); break;
			case "ComponentWrap": ComponentWrap.Register(L); break;
			case "ConditionTypeWrap": ConditionTypeWrap.Register(L); break;
			case "ConditionValidatorWrap": ConditionValidatorWrap.Register(L); break;
			case "DataByIdListWrap": DataByIdListWrap.Register(L); break;
			case "DataByIdWrap": DataByIdWrap.Register(L); break;
			case "DaySignDataWrap": DaySignDataWrap.Register(L); break;
			case "DBG_0Wrap": DBG_0Wrap.Register(L); break;
			case "DBG_1Wrap": DBG_1Wrap.Register(L); break;
			case "DebuggerWrap": DebuggerWrap.Register(L); break;
			case "DelegateWrap": DelegateWrap.Register(L); break;
			case "DynamicStringManagerWrap": DynamicStringManagerWrap.Register(L); break;
			case "EnumWrap": EnumWrap.Register(L); break;
			case "EquipInfoListWrap": EquipInfoListWrap.Register(L); break;
			case "EquipInfoWrap": EquipInfoWrap.Register(L); break;
			case "EquipmentBaseDataConfigWrap": EquipmentBaseDataConfigWrap.Register(L); break;
			case "EquipmentConfigWrap": EquipmentConfigWrap.Register(L); break;
			case "EquipmentSlotListWrap": EquipmentSlotListWrap.Register(L); break;
			case "EquipmentSlotWrap": EquipmentSlotWrap.Register(L); break;
			case "EventDelegateListWrap": EventDelegateListWrap.Register(L); break;
			case "EventDelegateWrap": EventDelegateWrap.Register(L); break;
			case "ExerciseInfoKeyValuePairWrap": ExerciseInfoKeyValuePairWrap.Register(L); break;
			case "ExerciseInfoListDictionaryWrap": ExerciseInfoListDictionaryWrap.Register(L); break;
			case "ExerciseInfoListWrap": ExerciseInfoListWrap.Register(L); break;
			case "ExerciseInfoWrap": ExerciseInfoWrap.Register(L); break;
			case "FashionAttrWrap": FashionAttrWrap.Register(L); break;
			case "FashionConfigWrap": FashionConfigWrap.Register(L); break;
			case "FashionDataWrap": FashionDataWrap.Register(L); break;
			case "FashionShopConfigItemDictionaryWrap": FashionShopConfigItemDictionaryWrap.Register(L); break;
			case "FashionShopConfigItemListWrap": FashionShopConfigItemListWrap.Register(L); break;
			case "FashionShopConfigItemWrap": FashionShopConfigItemWrap.Register(L); break;
			case "FashionShopConfigWrap": FashionShopConfigWrap.Register(L); break;
			case "FashionSlotProtoListWrap": FashionSlotProtoListWrap.Register(L); break;
			case "FashionSlotProtoWrap": FashionSlotProtoWrap.Register(L); break;
			case "FightRoleInfoListWrap": FightRoleInfoListWrap.Register(L); break;
			case "FightRoleListDictionaryWrap": FightRoleListDictionaryWrap.Register(L); break;
			case "fogs_proto_config_AwardConfigWrap": fogs_proto_config_AwardConfigWrap.Register(L); break;
			case "fogs_proto_config_AwardPackConfigWrap": fogs_proto_config_AwardPackConfigWrap.Register(L); break;
			case "fogs_proto_config_ChapterConfigWrap": fogs_proto_config_ChapterConfigWrap.Register(L); break;
			case "fogs_proto_config_DataConstructionWrap": fogs_proto_config_DataConstructionWrap.Register(L); break;
			case "fogs_proto_config_GenerateNewGoodsArgConfigWrap": fogs_proto_config_GenerateNewGoodsArgConfigWrap.Register(L); break;
			case "fogs_proto_config_GoodsAttrConfigWrap": fogs_proto_config_GoodsAttrConfigWrap.Register(L); break;
			case "fogs_proto_config_GoodsCompositeConfigWrap": fogs_proto_config_GoodsCompositeConfigWrap.Register(L); break;
			case "fogs_proto_config_GoodsUseConfigWrap": fogs_proto_config_GoodsUseConfigWrap.Register(L); break;
			case "fogs_proto_config_LotteryConfigWrap": fogs_proto_config_LotteryConfigWrap.Register(L); break;
			case "fogs_proto_config_NPCConfigWrap": fogs_proto_config_NPCConfigWrap.Register(L); break;
			case "fogs_proto_config_QualifyingNewConfigWrap": fogs_proto_config_QualifyingNewConfigWrap.Register(L); break;
			case "fogs_proto_config_QualifyingNewerConfigWrap": fogs_proto_config_QualifyingNewerConfigWrap.Register(L); break;
			case "fogs_proto_config_QualifyingNewerLeagueAwardsConfigWrap": fogs_proto_config_QualifyingNewerLeagueAwardsConfigWrap.Register(L); break;
			case "fogs_proto_config_QualifyingNewerSeasonConfigWrap": fogs_proto_config_QualifyingNewerSeasonConfigWrap.Register(L); break;
			case "fogs_proto_config_QualifyingNewSeasonConfigWrap": fogs_proto_config_QualifyingNewSeasonConfigWrap.Register(L); break;
			case "fogs_proto_config_RankConfigWrap": fogs_proto_config_RankConfigWrap.Register(L); break;
			case "fogs_proto_config_SectionConfigWrap": fogs_proto_config_SectionConfigWrap.Register(L); break;
			case "fogs_proto_config_StoreRefreshConsumeConfigWrap": fogs_proto_config_StoreRefreshConsumeConfigWrap.Register(L); break;
			case "fogs_proto_config_TaskConfigWrap": fogs_proto_config_TaskConfigWrap.Register(L); break;
			case "fogs_proto_msg_ActivityInfoWrap": fogs_proto_msg_ActivityInfoWrap.Register(L); break;
			case "fogs_proto_msg_BadgeBookWrap": fogs_proto_msg_BadgeBookWrap.Register(L); break;
			case "fogs_proto_msg_BadgeCGWrap": fogs_proto_msg_BadgeCGWrap.Register(L); break;
			case "fogs_proto_msg_BadgeSlotStatusWrap": fogs_proto_msg_BadgeSlotStatusWrap.Register(L); break;
			case "fogs_proto_msg_BadgeSlotWrap": fogs_proto_msg_BadgeSlotWrap.Register(L); break;
			case "fogs_proto_msg_BullFightWrap": fogs_proto_msg_BullFightWrap.Register(L); break;
			case "fogs_proto_msg_ChatChannelTypeWrap": fogs_proto_msg_ChatChannelTypeWrap.Register(L); break;
			case "fogs_proto_msg_EnhanceExerciseRespWrap": fogs_proto_msg_EnhanceExerciseRespWrap.Register(L); break;
			case "fogs_proto_msg_EnhanceLevelRespWrap": fogs_proto_msg_EnhanceLevelRespWrap.Register(L); break;
			case "fogs_proto_msg_EquipmentOperationTypeWrap": fogs_proto_msg_EquipmentOperationTypeWrap.Register(L); break;
			case "fogs_proto_msg_EquipmentSlotIDWrap": fogs_proto_msg_EquipmentSlotIDWrap.Register(L); break;
			case "fogs_proto_msg_EquipmentTypeWrap": fogs_proto_msg_EquipmentTypeWrap.Register(L); break;
			case "fogs_proto_msg_ErrorIDWrap": fogs_proto_msg_ErrorIDWrap.Register(L); break;
			case "fogs_proto_msg_FashionOperationTypeWrap": fogs_proto_msg_FashionOperationTypeWrap.Register(L); break;
			case "fogs_proto_msg_FightRoleInfoWrap": fogs_proto_msg_FightRoleInfoWrap.Register(L); break;
			case "fogs_proto_msg_FightRoleWrap": fogs_proto_msg_FightRoleWrap.Register(L); break;
			case "fogs_proto_msg_FightStatusWrap": fogs_proto_msg_FightStatusWrap.Register(L); break;
			case "fogs_proto_msg_FriendInfoWrap": fogs_proto_msg_FriendInfoWrap.Register(L); break;
			case "fogs_proto_msg_FriendOperationTypeWrap": fogs_proto_msg_FriendOperationTypeWrap.Register(L); break;
			case "fogs_proto_msg_GameModeInfoWrap": fogs_proto_msg_GameModeInfoWrap.Register(L); break;
			case "fogs_proto_msg_GameModeWrap": fogs_proto_msg_GameModeWrap.Register(L); break;
			case "fogs_proto_msg_GenderTypeWrap": fogs_proto_msg_GenderTypeWrap.Register(L); break;
			case "fogs_proto_msg_GoodsCategoryWrap": fogs_proto_msg_GoodsCategoryWrap.Register(L); break;
			case "fogs_proto_msg_GoodsProtoWrap": fogs_proto_msg_GoodsProtoWrap.Register(L); break;
			case "fogs_proto_msg_GoodsQualityWrap": fogs_proto_msg_GoodsQualityWrap.Register(L); break;
			case "fogs_proto_msg_ImproveQualityRespWrap": fogs_proto_msg_ImproveQualityRespWrap.Register(L); break;
			case "fogs_proto_msg_InviteRoleRespWrap": fogs_proto_msg_InviteRoleRespWrap.Register(L); break;
			case "fogs_proto_msg_LotteryInfoWrap": fogs_proto_msg_LotteryInfoWrap.Register(L); break;
			case "fogs_proto_msg_MailInfoWrap": fogs_proto_msg_MailInfoWrap.Register(L); break;
			case "fogs_proto_msg_MatchTypeWrap": fogs_proto_msg_MatchTypeWrap.Register(L); break;
			case "fogs_proto_msg_NewComerInfoWrap": fogs_proto_msg_NewComerInfoWrap.Register(L); break;
			case "fogs_proto_msg_PlayerDataWrap": fogs_proto_msg_PlayerDataWrap.Register(L); break;
			case "fogs_proto_msg_PositionTypeWrap": fogs_proto_msg_PositionTypeWrap.Register(L); break;
			case "fogs_proto_msg_PvpLadderInfoWrap": fogs_proto_msg_PvpLadderInfoWrap.Register(L); break;
			case "fogs_proto_msg_PvpPlusInfoWrap": fogs_proto_msg_PvpPlusInfoWrap.Register(L); break;
			case "fogs_proto_msg_QualifyingInfoWrap": fogs_proto_msg_QualifyingInfoWrap.Register(L); break;
			case "fogs_proto_msg_QualifyingNewerInfoWrap": fogs_proto_msg_QualifyingNewerInfoWrap.Register(L); break;
			case "fogs_proto_msg_QualifyingNewInfoWrap": fogs_proto_msg_QualifyingNewInfoWrap.Register(L); break;
			case "fogs_proto_msg_ResetRoleRespWrap": fogs_proto_msg_ResetRoleRespWrap.Register(L); break;
			case "fogs_proto_msg_RoleInfoWrap": fogs_proto_msg_RoleInfoWrap.Register(L); break;
			case "fogs_proto_msg_ShootInfoWrap": fogs_proto_msg_ShootInfoWrap.Register(L); break;
			case "fogs_proto_msg_SignInfoWrap": fogs_proto_msg_SignInfoWrap.Register(L); break;
			case "fogs_proto_msg_StoreTypeWrap": fogs_proto_msg_StoreTypeWrap.Register(L); break;
			case "fogs_proto_msg_TaskDataWrap": fogs_proto_msg_TaskDataWrap.Register(L); break;
			case "fogs_proto_msg_TaskInfoWrap": fogs_proto_msg_TaskInfoWrap.Register(L); break;
			case "fogs_proto_msg_TaskTypeWrap": fogs_proto_msg_TaskTypeWrap.Register(L); break;
			case "fogs_proto_msg_TattooTypeWrap": fogs_proto_msg_TattooTypeWrap.Register(L); break;
			case "fogs_proto_msg_TeamTypeWrap": fogs_proto_msg_TeamTypeWrap.Register(L); break;
			case "fogs_proto_msg_TourInfoWrap": fogs_proto_msg_TourInfoWrap.Register(L); break;
			case "fogs_proto_msg_TrainingInfoWrap": fogs_proto_msg_TrainingInfoWrap.Register(L); break;
			case "fogs_proto_msg_TrainingStateWrap": fogs_proto_msg_TrainingStateWrap.Register(L); break;
			case "fogs_proto_msg_vipOperTypeWrap": fogs_proto_msg_vipOperTypeWrap.Register(L); break;
			case "FriendDataWrap": FriendDataWrap.Register(L); break;
			case "FuncConditionWrap": FuncConditionWrap.Register(L); break;
			case "FunctionConditionConfigWrap": FunctionConditionConfigWrap.Register(L); break;
			case "GameMatchWrap": GameMatchWrap.Register(L); break;
			case "GameMatch_1ON1Wrap": GameMatch_1ON1Wrap.Register(L); break;
			case "GameMatch_AsynPVP3ON3Wrap": GameMatch_AsynPVP3ON3Wrap.Register(L); break;
			case "GameMatch_ConfigWrap": GameMatch_ConfigWrap.Register(L); break;
			case "GameMatch_LeagueTypeWrap": GameMatch_LeagueTypeWrap.Register(L); break;
			case "GameMatch_MultiPlayerWrap": GameMatch_MultiPlayerWrap.Register(L); break;
			case "GameMatch_Practice1V1Wrap": GameMatch_Practice1V1Wrap.Register(L); break;
			case "GameMatch_TypeWrap": GameMatch_TypeWrap.Register(L); break;
			case "GameModeConfigWrap": GameModeConfigWrap.Register(L); break;
			case "GameModeInfoListWrap": GameModeInfoListWrap.Register(L); break;
			case "GameModeWrap": GameModeWrap.Register(L); break;
			case "GameObjectPlaceholderWrap": GameObjectPlaceholderWrap.Register(L); break;
			case "GameObjectWrap": GameObjectWrap.Register(L); break;
			case "GameSceneWrap": GameSceneWrap.Register(L); break;
			case "GameSystemWrap": GameSystemWrap.Register(L); break;
			case "GameUtilsWrap": GameUtilsWrap.Register(L); break;
			case "GenerateNewGoodsArgConfigListWrap": GenerateNewGoodsArgConfigListWrap.Register(L); break;
			case "GlobalConstWrap": GlobalConstWrap.Register(L); break;
			case "GoodsAttrConfigDictionaryWrap": GoodsAttrConfigDictionaryWrap.Register(L); break;
			case "GoodsAttrConfigKeyValuePairWrap": GoodsAttrConfigKeyValuePairWrap.Register(L); break;
			case "GoodsComposeBaseNewConfigWrap": GoodsComposeBaseNewConfigWrap.Register(L); break;
			case "GoodsComposeNewConfigWrap": GoodsComposeNewConfigWrap.Register(L); break;
			case "GoodsConfigWrap": GoodsConfigWrap.Register(L); break;
			case "GoodsDictionaryWrap": GoodsDictionaryWrap.Register(L); break;
			case "GoodsKeyValuePairWrap": GoodsKeyValuePairWrap.Register(L); break;
			case "GoodsListWrap": GoodsListWrap.Register(L); break;
			case "GoodsWrap": GoodsWrap.Register(L); break;
			case "GuideModuleWrap": GuideModuleWrap.Register(L); break;
			case "GuideSystemWrap": GuideSystemWrap.Register(L); break;
			case "GuideTipWrap": GuideTipWrap.Register(L); break;
			case "IEnumeratorWrap": IEnumeratorWrap.Register(L); break;
			case "IM_NumberWrap": IM_NumberWrap.Register(L); break;
			case "IM_Vector3Wrap": IM_Vector3Wrap.Register(L); break;
			case "InputWrap": InputWrap.Register(L); break;
			case "IntListWrap": IntListWrap.Register(L); break;
			case "KeyCodeWrap": KeyCodeWrap.Register(L); break;
			case "KeyValueDataListWrap": KeyValueDataListWrap.Register(L); break;
			case "KeyValueDataWrap": KeyValueDataWrap.Register(L); break;
			case "LadderConfigWrap": LadderConfigWrap.Register(L); break;
			case "LadderLevelWrap": LadderLevelWrap.Register(L); break;
			case "LadderRewardWrap": LadderRewardWrap.Register(L); break;
			case "LadderSeasonWrap": LadderSeasonWrap.Register(L); break;
			case "LayerMaskWrap": LayerMaskWrap.Register(L); break;
			case "LightTypeWrap": LightTypeWrap.Register(L); break;
			case "LightWrap": LightWrap.Register(L); break;
			case "LocalizationWrap": LocalizationWrap.Register(L); break;
			case "LoginIDManagerWrap": LoginIDManagerWrap.Register(L); break;
			case "LotteryConfigWrap": LotteryConfigWrap.Register(L); break;
			case "LuaComponentWrap": LuaComponentWrap.Register(L); break;
			case "LuaHelperWrap": LuaHelperWrap.Register(L); break;
			case "MailInfoListWrap": MailInfoListWrap.Register(L); break;
			case "MainPlayerWrap": MainPlayerWrap.Register(L); break;
			case "MapConfigWrap": MapConfigWrap.Register(L); break;
			case "MapGroupDataWrap": MapGroupDataWrap.Register(L); break;
			case "MatchStateBeginWrap": MatchStateBeginWrap.Register(L); break;
			case "MatchStateFoulWrap": MatchStateFoulWrap.Register(L); break;
			case "MatchStateGoalWrap": MatchStateGoalWrap.Register(L); break;
			case "MatchStateMachineWrap": MatchStateMachineWrap.Register(L); break;
			case "MatchStateOpeningWrap": MatchStateOpeningWrap.Register(L); break;
			case "MatchStateOverWrap": MatchStateOverWrap.Register(L); break;
			case "MatchStatePlayerCloseUpWrap": MatchStatePlayerCloseUpWrap.Register(L); break;
			case "MatchStatePlayingWrap": MatchStatePlayingWrap.Register(L); break;
			case "MatchStatePlotWrap": MatchStatePlotWrap.Register(L); break;
			case "MatchStateShowRuleWrap": MatchStateShowRuleWrap.Register(L); break;
			case "MatchStateTipOffWrap": MatchStateTipOffWrap.Register(L); break;
			case "MatchStateWrap": MatchStateWrap.Register(L); break;
			case "MatchState_StateWrap": MatchState_StateWrap.Register(L); break;
			case "MaterialWrap": MaterialWrap.Register(L); break;
			case "MeshColliderWrap": MeshColliderWrap.Register(L); break;
			case "MeshFilterWrap": MeshFilterWrap.Register(L); break;
			case "MeshRendererWrap": MeshRendererWrap.Register(L); break;
			case "MeshWrap": MeshWrap.Register(L); break;
			case "ModelShowItemWrap": ModelShowItemWrap.Register(L); break;
			case "MonoBehaviourWrap": MonoBehaviourWrap.Register(L); break;
			case "MonthSignDataWrap": MonthSignDataWrap.Register(L); break;
			case "MotionWrap": MotionWrap.Register(L); break;
			case "MultiLabelWrap": MultiLabelWrap.Register(L); break;
			case "NetworkConnWrap": NetworkConnWrap.Register(L); break;
			case "NetworkManagerWrap": NetworkManagerWrap.Register(L); break;
			case "NetworkProfilerWrap": NetworkProfilerWrap.Register(L); break;
			case "NewComerSignConfigWrap": NewComerSignConfigWrap.Register(L); break;
			case "NewComerSignDataDictionaryWrap": NewComerSignDataDictionaryWrap.Register(L); break;
			case "NewComerSignDataKeyValuePairWrap": NewComerSignDataKeyValuePairWrap.Register(L); break;
			case "NewComerSignDataWrap": NewComerSignDataWrap.Register(L); break;
			case "NewComerTotalDataDictionaryWrap": NewComerTotalDataDictionaryWrap.Register(L); break;
			case "NewComerTotalDataKeyValuePairWrap": NewComerTotalDataKeyValuePairWrap.Register(L); break;
			case "NewComerTotalDataWrap": NewComerTotalDataWrap.Register(L); break;
			case "NewComerTrialInfoWrap": NewComerTrialInfoWrap.Register(L); break;
			case "NGUITextWrap": NGUITextWrap.Register(L); break;
			case "NGUIText_AlignmentWrap": NGUIText_AlignmentWrap.Register(L); break;
			case "NGUIToolsWrap": NGUIToolsWrap.Register(L); break;
			case "NPCDataConfigWrap": NPCDataConfigWrap.Register(L); break;
			case "ObjectWrap": ObjectWrap.Register(L); break;
			case "ParticleAnimatorWrap": ParticleAnimatorWrap.Register(L); break;
			case "ParticleEmitterWrap": ParticleEmitterWrap.Register(L); break;
			case "ParticleRendererWrap": ParticleRendererWrap.Register(L); break;
			case "ParticleSystemRendererWrap": ParticleSystemRendererWrap.Register(L); break;
			case "ParticleSystemWrap": ParticleSystemWrap.Register(L); break;
			case "PhysicsWrap": PhysicsWrap.Register(L); break;
			case "PlatNetworkWrap": PlatNetworkWrap.Register(L); break;
			case "PlayerDataBridgeWrap": PlayerDataBridgeWrap.Register(L); break;
			case "PlayerInfoVisualizerWrap": PlayerInfoVisualizerWrap.Register(L); break;
			case "PlayerListWrap": PlayerListWrap.Register(L); break;
			case "PlayerModelWrap": PlayerModelWrap.Register(L); break;
			case "PlayerPrefsWrap": PlayerPrefsWrap.Register(L); break;
			case "PlayerStateMachineWrap": PlayerStateMachineWrap.Register(L); break;
			case "PlayerStateMachine_ListenerWrap": PlayerStateMachine_ListenerWrap.Register(L); break;
			case "PlayerStateWrap": PlayerStateWrap.Register(L); break;
			case "PlayerState_BackBlockWrap": PlayerState_BackBlockWrap.Register(L); break;
			case "PlayerState_BackCompeteWrap": PlayerState_BackCompeteWrap.Register(L); break;
			case "PlayerState_BackToBackForwardWrap": PlayerState_BackToBackForwardWrap.Register(L); break;
			case "PlayerState_BackToBackWrap": PlayerState_BackToBackWrap.Register(L); break;
			case "PlayerState_BackToStandWrap": PlayerState_BackToStandWrap.Register(L); break;
			case "PlayerState_BackTurnRunWrap": PlayerState_BackTurnRunWrap.Register(L); break;
			case "PlayerState_BlockWrap": PlayerState_BlockWrap.Register(L); break;
			case "PlayerState_BodyThrowCatchWrap": PlayerState_BodyThrowCatchWrap.Register(L); break;
			case "PlayerState_CrossedWrap": PlayerState_CrossedWrap.Register(L); break;
			case "PlayerState_CrossOverWrap": PlayerState_CrossOverWrap.Register(L); break;
			case "PlayerState_DefenseCrossWrap": PlayerState_DefenseCrossWrap.Register(L); break;
			case "PlayerState_DefenseWrap": PlayerState_DefenseWrap.Register(L); break;
			case "PlayerState_DisturbWrap": PlayerState_DisturbWrap.Register(L); break;
			case "PlayerState_DunkWrap": PlayerState_DunkWrap.Register(L); break;
			case "PlayerState_FallGroundWrap": PlayerState_FallGroundWrap.Register(L); break;
			case "PlayerState_FallLostBallWrap": PlayerState_FallLostBallWrap.Register(L); break;
			case "PlayerState_GoalPoseWrap": PlayerState_GoalPoseWrap.Register(L); break;
			case "PlayerState_HoldWrap": PlayerState_HoldWrap.Register(L); break;
			case "PlayerState_KnockedWrap": PlayerState_KnockedWrap.Register(L); break;
			case "PlayerState_LayupFailedWrap": PlayerState_LayupFailedWrap.Register(L); break;
			case "PlayerState_LayupWrap": PlayerState_LayupWrap.Register(L); break;
			case "PlayerState_PickupWrap": PlayerState_PickupWrap.Register(L); break;
			case "PlayerState_PrepareToShootWrap": PlayerState_PrepareToShootWrap.Register(L); break;
			case "PlayerState_ReboundWrap": PlayerState_ReboundWrap.Register(L); break;
			case "PlayerState_ResultPoseWrap": PlayerState_ResultPoseWrap.Register(L); break;
			case "PlayerState_RunWrap": PlayerState_RunWrap.Register(L); break;
			case "PlayerState_RushWrap": PlayerState_RushWrap.Register(L); break;
			case "PlayerState_ShootWrap": PlayerState_ShootWrap.Register(L); break;
			case "PlayerState_SkillWrap": PlayerState_SkillWrap.Register(L); break;
			case "PlayerState_StandWrap": PlayerState_StandWrap.Register(L); break;
			case "PlayerState_StateWrap": PlayerState_StateWrap.Register(L); break;
			case "PlayerState_StealWrap": PlayerState_StealWrap.Register(L); break;
			case "PlayerWrap": PlayerWrap.Register(L); break;
			case "PlayModeWrap": PlayModeWrap.Register(L); break;
			case "PlaySoundManagerWrap": PlaySoundManagerWrap.Register(L); break;
			case "PositionTypeUintDictionaryWrap": PositionTypeUintDictionaryWrap.Register(L); break;
			case "PracticePveConfigWrap": PracticePveConfigWrap.Register(L); break;
			case "PracticePveDataWrap": PracticePveDataWrap.Register(L); break;
			case "PractiseConfigWrap": PractiseConfigWrap.Register(L); break;
			case "PractiseDataDictionaryWrap": PractiseDataDictionaryWrap.Register(L); break;
			case "PractiseDataKeyValuePairWrap": PractiseDataKeyValuePairWrap.Register(L); break;
			case "PractiseDataWrap": PractiseDataWrap.Register(L); break;
			case "PractiseData_TypeWrap": PractiseData_TypeWrap.Register(L); break;
			case "PresentHpConfigWrap": PresentHpConfigWrap.Register(L); break;
			case "ProfilerWrap": ProfilerWrap.Register(L); break;
			case "PvpRegularInfoWrap": PvpRegularInfoWrap.Register(L); break;
			case "QualifyingAwardsDataListWrap": QualifyingAwardsDataListWrap.Register(L); break;
			case "QualifyingAwardsDataWrap": QualifyingAwardsDataWrap.Register(L); break;
			case "QualifyingConfigWrap": QualifyingConfigWrap.Register(L); break;
			case "QualifyingNewConfigWrap": QualifyingNewConfigWrap.Register(L); break;
			case "QualifyingNewerConfigWrap": QualifyingNewerConfigWrap.Register(L); break;
			case "QualityAttrCorConfigWrap": QualityAttrCorConfigWrap.Register(L); break;
			case "QualitySettingsWrap": QualitySettingsWrap.Register(L); break;
			case "QueueModeWrap": QueueModeWrap.Register(L); break;
			case "RankConfigWrap": RankConfigWrap.Register(L); break;
			case "RankSubTypeWrap": RankSubTypeWrap.Register(L); break;
			case "RankTypeWrap": RankTypeWrap.Register(L); break;
			case "RechargeDictionaryWrap": RechargeDictionaryWrap.Register(L); break;
			case "RechargeKeyValuePairWrap": RechargeKeyValuePairWrap.Register(L); break;
			case "RechargeWrap": RechargeWrap.Register(L); break;
			case "RendererWrap": RendererWrap.Register(L); break;
			case "RenderSettingsWrap": RenderSettingsWrap.Register(L); break;
			case "RenderTextureWrap": RenderTextureWrap.Register(L); break;
			case "ResourceLoadManagerWrap": ResourceLoadManagerWrap.Register(L); break;
			case "ResourcesWrap": ResourcesWrap.Register(L); break;
			case "RobotPlayerListWrap": RobotPlayerListWrap.Register(L); break;
			case "RoleBaseData2ListWrap": RoleBaseData2ListWrap.Register(L); break;
			case "RoleBaseData2Wrap": RoleBaseData2Wrap.Register(L); break;
			case "RoleBaseDataDictionarryWrap": RoleBaseDataDictionarryWrap.Register(L); break;
			case "RoleBaseDataKeyValuePairWrap": RoleBaseDataKeyValuePairWrap.Register(L); break;
			case "RoleGiftConfigWrap": RoleGiftConfigWrap.Register(L); break;
			case "RoleInfoListWrap": RoleInfoListWrap.Register(L); break;
			case "RoleLevelConfigWrap": RoleLevelConfigWrap.Register(L); break;
			case "RoleShapeConfigWrap": RoleShapeConfigWrap.Register(L); break;
			case "RoleShapeDictionaryWrap": RoleShapeDictionaryWrap.Register(L); break;
			case "RoleShapeKeyValuePairWrap": RoleShapeKeyValuePairWrap.Register(L); break;
			case "RoleShapeWrap": RoleShapeWrap.Register(L); break;
			case "SchedulerWrap": SchedulerWrap.Register(L); break;
			case "ScreenWrap": ScreenWrap.Register(L); break;
			case "ScrollViewAsyncLoadItemWrap": ScrollViewAsyncLoadItemWrap.Register(L); break;
			case "ScrollViewIncLoadWrap": ScrollViewIncLoadWrap.Register(L); break;
			case "SectionConfigDictionaryWrap": SectionConfigDictionaryWrap.Register(L); break;
			case "SectionDictionaryWrap": SectionDictionaryWrap.Register(L); break;
			case "SectionKeyValuePairWrap": SectionKeyValuePairWrap.Register(L); break;
			case "SectionWrap": SectionWrap.Register(L); break;
			case "ShaderWrap": ShaderWrap.Register(L); break;
			case "ShootGameConfigWrap": ShootGameConfigWrap.Register(L); break;
			case "ShootGameWrap": ShootGameWrap.Register(L); break;
			case "SignConfigWrap": SignConfigWrap.Register(L); break;
			case "Singleton_AudioManagerWrap": Singleton_AudioManagerWrap.Register(L); break;
			case "Singleton_ConditionValidatorWrap": Singleton_ConditionValidatorWrap.Register(L); break;
			case "Singleton_DebuggerWrap": Singleton_DebuggerWrap.Register(L); break;
			case "Singleton_GuideSystemWrap": Singleton_GuideSystemWrap.Register(L); break;
			case "Singleton_MainPlayerWrap": Singleton_MainPlayerWrap.Register(L); break;
			case "Singleton_PlatNetworkWrap": Singleton_PlatNetworkWrap.Register(L); break;
			case "Singleton_ResourceLoadManagerWrap": Singleton_ResourceLoadManagerWrap.Register(L); break;
			case "SkillAttrWrap": SkillAttrWrap.Register(L); break;
			case "SkillConfigWrap": SkillConfigWrap.Register(L); break;
			case "SkillConsumableListWrap": SkillConsumableListWrap.Register(L); break;
			case "SkillConsumableWrap": SkillConsumableWrap.Register(L); break;
			case "SkillLevelDictionaryWrap": SkillLevelDictionaryWrap.Register(L); break;
			case "SkillLevelWrap": SkillLevelWrap.Register(L); break;
			case "SkillSlotProtoListWrap": SkillSlotProtoListWrap.Register(L); break;
			case "SkillSlotProWrap": SkillSlotProWrap.Register(L); break;
			case "SkillTypeWrap": SkillTypeWrap.Register(L); break;
			case "SkillUpConfigWrap": SkillUpConfigWrap.Register(L); break;
			case "SkinnedMeshRendererWrap": SkinnedMeshRendererWrap.Register(L); break;
			case "SleepTimeoutWrap": SleepTimeoutWrap.Register(L); break;
			case "SpaceWrap": SpaceWrap.Register(L); break;
			case "SphereColliderWrap": SphereColliderWrap.Register(L); break;
			case "SpringPanelWrap": SpringPanelWrap.Register(L); break;
			case "StarAttrConfigWrap": StarAttrConfigWrap.Register(L); break;
			case "StarAttrWrap": StarAttrWrap.Register(L); break;
			case "StoreGoodsConfigWrap": StoreGoodsConfigWrap.Register(L); break;
			case "StoreGoodsDataListDictionaryWrap": StoreGoodsDataListDictionaryWrap.Register(L); break;
			case "StoreGoodsDataListKeyValuePairWrap": StoreGoodsDataListKeyValuePairWrap.Register(L); break;
			case "StoreGoodsDataListWrap": StoreGoodsDataListWrap.Register(L); break;
			case "StoreGoodsDataWrap": StoreGoodsDataWrap.Register(L); break;
			case "StrengthBarWrap": StrengthBarWrap.Register(L); break;
			case "StringListWrap": StringListWrap.Register(L); break;
			case "StringUintDictionaryWrap": StringUintDictionaryWrap.Register(L); break;
			case "StringUintKeyValuePairWrap": StringUintKeyValuePairWrap.Register(L); break;
			case "stringWrap": stringWrap.Register(L); break;
			case "SuitAddnAttrDataWrap": SuitAddnAttrDataWrap.Register(L); break;
			case "System_ObjectWrap": System_ObjectWrap.Register(L); break;
			case "TalentConfigWrap": TalentConfigWrap.Register(L); break;
			case "TalentItemWrap": TalentItemWrap.Register(L); break;
			case "TaskDataConfigWrap": TaskDataConfigWrap.Register(L); break;
			case "TaskDataListWrap": TaskDataListWrap.Register(L); break;
			case "TeamLevelConfigWrap": TeamLevelConfigWrap.Register(L); break;
			case "TeamLevelDataWrap": TeamLevelDataWrap.Register(L); break;
			case "TextAssetWrap": TextAssetWrap.Register(L); break;
			case "TextLabelReplaceWrap": TextLabelReplaceWrap.Register(L); break;
			case "Texture2DWrap": Texture2DWrap.Register(L); break;
			case "TextureWrap": TextureWrap.Register(L); break;
			case "TouchPhaseWrap": TouchPhaseWrap.Register(L); break;
			case "TourConfigWrap": TourConfigWrap.Register(L); break;
			case "TourDataWrap": TourDataWrap.Register(L); break;
			case "TrackedReferenceWrap": TrackedReferenceWrap.Register(L); break;
			case "TransformWrap": TransformWrap.Register(L); break;
			case "TrialConfigWrap": TrialConfigWrap.Register(L); break;
			case "TrialDataListWrap": TrialDataListWrap.Register(L); break;
			case "TrialDataWrap": TrialDataWrap.Register(L); break;
			case "TweenPositionWrap": TweenPositionWrap.Register(L); break;
			case "TweenRotationWrap": TweenRotationWrap.Register(L); break;
			case "TweenScaleWrap": TweenScaleWrap.Register(L); break;
			case "TweenWidthWrap": TweenWidthWrap.Register(L); break;
			case "TypeWrap": TypeWrap.Register(L); break;
			case "UBasketballWrap": UBasketballWrap.Register(L); break;
			case "UBasketWrap": UBasketWrap.Register(L); break;
			case "UIAtlasWrap": UIAtlasWrap.Register(L); break;
			case "UIBasicSpriteWrap": UIBasicSpriteWrap.Register(L); break;
			case "UIBasicSprite_FlipWrap": UIBasicSprite_FlipWrap.Register(L); break;
			case "UIButtonColorWrap": UIButtonColorWrap.Register(L); break;
			case "UIButtonWrap": UIButtonWrap.Register(L); break;
			case "UICameraWrap": UICameraWrap.Register(L); break;
			case "UICenterOnChildWrap": UICenterOnChildWrap.Register(L); break;
			case "UIChallengeLoadingWrap": UIChallengeLoadingWrap.Register(L); break;
			case "UIDragDropItemEventWrap": UIDragDropItemEventWrap.Register(L); break;
			case "UIDragDropItemWrap": UIDragDropItemWrap.Register(L); break;
			case "UIDragScrollViewWrap": UIDragScrollViewWrap.Register(L); break;
			case "UIEventListenerWrap": UIEventListenerWrap.Register(L); break;
			case "UIForm_ShowHideDirectionWrap": UIForm_ShowHideDirectionWrap.Register(L); break;
			case "UIGridWrap": UIGridWrap.Register(L); break;
			case "UIGrid_ArrangementWrap": UIGrid_ArrangementWrap.Register(L); break;
			case "UIInputWrap": UIInputWrap.Register(L); break;
			case "UILabelWrap": UILabelWrap.Register(L); break;
			case "UIManagerWrap": UIManagerWrap.Register(L); break;
			case "UintBooleanKeyValuePairWrap": UintBooleanKeyValuePairWrap.Register(L); break;
			case "UintBooleanListWrap": UintBooleanListWrap.Register(L); break;
			case "UintDictionaryDictionaryWrap": UintDictionaryDictionaryWrap.Register(L); break;
			case "UintDictionaryKeyValuePairWrap": UintDictionaryKeyValuePairWrap.Register(L); break;
			case "UintDictionaryWrap": UintDictionaryWrap.Register(L); break;
			case "UintKeyValuePairWrap": UintKeyValuePairWrap.Register(L); break;
			case "UintListWrap": UintListWrap.Register(L); break;
			case "UIPanelWrap": UIPanelWrap.Register(L); break;
			case "UIProgressBarWrap": UIProgressBarWrap.Register(L); break;
			case "UIRectWrap": UIRectWrap.Register(L); break;
			case "UIRect_AnchorPointWrap": UIRect_AnchorPointWrap.Register(L); break;
			case "UIScrollBarWrap": UIScrollBarWrap.Register(L); break;
			case "UIScrollViewWrap": UIScrollViewWrap.Register(L); break;
			case "UISliderWrap": UISliderWrap.Register(L); break;
			case "UISpriteWrap": UISpriteWrap.Register(L); break;
			case "UIStoreFashionWrap": UIStoreFashionWrap.Register(L); break;
			case "UITableWrap": UITableWrap.Register(L); break;
			case "UITextureWrap": UITextureWrap.Register(L); break;
			case "UIToggleWrap": UIToggleWrap.Register(L); break;
			case "UITweenerWrap": UITweenerWrap.Register(L); break;
			case "UITweener_MethodWrap": UITweener_MethodWrap.Register(L); break;
			case "UIViewportWrap": UIViewportWrap.Register(L); break;
			case "UIWidgetContainerWrap": UIWidgetContainerWrap.Register(L); break;
			case "UIWidgetWrap": UIWidgetWrap.Register(L); break;
			case "UIWidget_PivotWrap": UIWidget_PivotWrap.Register(L); break;
			case "UIWrapContentWrap": UIWrapContentWrap.Register(L); break;
			case "UnityEngine_Experimental_Director_DirectorPlayerWrap": UnityEngine_Experimental_Director_DirectorPlayerWrap.Register(L); break;
			case "UnityTimeWrap": UnityTimeWrap.Register(L); break;
			case "UtilWrap": UtilWrap.Register(L); break;
			case "VipDataWrap": VipDataWrap.Register(L); break;
			case "VipPrivilegeConfigWrap": VipPrivilegeConfigWrap.Register(L); break;
			case "VipStateWrap": VipStateWrap.Register(L); break;
			case "WidgetPlaceholderWrap": WidgetPlaceholderWrap.Register(L); break;
			case "YieldInstructionWrap": YieldInstructionWrap.Register(L); break;
		}
	}
}
