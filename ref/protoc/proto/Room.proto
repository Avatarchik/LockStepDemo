package fogs.proto.msg;
import "Base.proto";
import "Player.proto";
import "Exercise.proto";
import "Equipment.proto";
import "Goods.proto";
import "Fashion.proto";

//---------房间模块相关

//房间匹配模式
enum RoomType
{
	RT_ONE			= 1; //单人
	RT_TWO			= 2; //两人
	RT_THREE		= 3; //三人
}

//当前房间的状态
enum RoomState
{
	RS_NONE			= 0; //NONE
	RS_IDLE			= 1; //房间空闲(尚且有可用的空位)
	RS_FULL			= 2; //房间满员
	RS_READY		= 3; //已经就绪，等待房主开始游戏
	RS_START		= 4; //开始匹配中
	RS_FREEZE		= 5; //房间冻结，不能执行任何操作(游戏中)
}

//房间中的操作类型
enum RoomActionType
{
	RAT_CHANGE_POS		= 1; //变换位置
	RAT_CHANGE_ROOM		= 2; //快速换房
	RAT_READY			= 3; //准备
	RAT_CANCEL			= 4; //取消准备
	RAT_START			= 5; //开始
	RAT_KICK			= 6; //踢人
	RAT_INVITE			= 7; //邀请好友
}

//参赛玩家信息（GameServer到PlatServer请求的玩家信息）
message PlayerData
{
	optional uint32 acc_id							= 1; //AccountID
	optional string name							= 2; //名称
	optional uint32 level							= 3; //等级
	repeated RoleInfo roles							= 4; //出战球员列表
	optional uint32 is_room_master					= 5; //是否是房主
	optional uint32 is_room_ready					= 6; //是否已准备开始
	optional uint32 is_home_field					= 7;
	repeated EquipInfo equipments					= 8;
	repeated FightRole squad 						= 9;
	repeated KeyValueData role_map					= 10; //图鉴
	optional uint32 winning_streak					= 11; //连胜次数
	repeated GoodsProto fashion_items				= 12; //时装
}

//房间信息
message RoomInfo
{	
	required uint32 id			= 1; //房间ID
	optional RoomType type		= 2; //房间模式
	optional RoomState state	= 3; //房间状态
	optional uint32 master		= 4; //房主的AccountID
	optional uint32 number		= 5; //房间人数
	repeated PlayerData members	= 6; //房间内成员列表
}

//创建新房间
message CreateRoomReq
{
	required uint32 acc_id			= 1; //AccountID
	required MatchType type	= 2[default=MT_NONE]; //比赛类型

	optional uint32 options			= 3; //选项（匹配要求）
	optional uint32 scene_id		= 4; //选择的场景ID
	optional uint32 plat_id			= 5; //PlatServerID
	optional PlayerData info 		= 6; //参赛玩家信息
	optional uint32 match_id		= 7; //MatchServerID
	optional uint32 room_id			= 8; //RoomID
}

//创建新房间回复
message CreateRoomResp
{
	required uint32 acc_id			= 1; //AccountID
	required MatchType type	= 2[default=MT_NONE]; //比赛类型
	required uint32 result			= 3; //创建结果

	optional uint32 match_id		= 4; //MatchServerID
	optional uint32 game_id			= 5; //GameServerID
	optional string game_ip			= 6; //GameServer的IP
	optional uint32 game_port		= 7; //GameServer的Port
	optional uint32 room_id			= 8; //RoomID
}

//加入房间
message JoinRoomReq
{
	required uint32 acc_id			= 1; //AccountID
	required MatchType type	= 2[default=MT_NONE]; //比赛类型

	optional uint32 options			= 3; //选项（匹配要求）
	optional uint32 plat_id			= 4; //PlatServerID
	optional PlayerData info 		= 5; //参赛玩家信息
	optional uint32 scene_id		= 6; //选择的场景ID
	optional uint32 match_id		= 7; //MatchServerID
	optional uint32 room_id			= 8; //RoomID
}

//加入房间回复
message JoinRoomResp
{
	required uint32 acc_id			= 1; //AccountID
	required MatchType type	= 2[default=MT_NONE]; //比赛类型
	required uint32 result			= 3; //创建结果

	optional uint32 match_id		= 4; //MatchServerID
	optional uint32 game_id			= 5; //GameServerID
	optional string game_ip			= 6; //GameServer的IP
	optional uint32 game_port		= 7; //GameServer的Port
	optional uint32 room_id			= 8; //RoomID
}


//进入房间请求
message EnterRoomReq
{
	required uint32 acc_id			= 1; //AccountID
	required MatchType type	= 2[default=MT_NONE]; //比赛类型
}

//进入房间回复
message EnterRoomResp
{
	required uint32 acc_id			= 1; //AccountID
	required MatchType type	= 2[default=MT_NONE]; //比赛类型
	required uint32 result			= 3; //创建结果
}

//退出房间请求
message ExitRoomReq
{
	required uint32 acc_id			= 1; //AccountID
	required MatchType type	= 2[default=MT_NONE]; //比赛类型

	optional uint32 room_id			= 3; //房间ID
	optional uint32 game_id			= 4; //GameServerID
}

//退出房间回复
message ExitRoomResp
{
	required uint32 acc_id			= 1; //AccountID
	required MatchType type	= 2[default=MT_NONE]; //比赛类型
	required uint32 result			= 3; //创建结果
}

//房间内的操作
message RomeActionReq
{
	required uint32 acc_id 				= 1; //AccountID
	required RoomActionType type 		= 2; //操作类型
}

//房间内的操作回复
message RomeActionResp
{
	required uint32 acc_id 				= 1; //AccountID
	required uint32 result 				= 2; //操作结果
	required RoomActionType type 		= 3; //操作类型
}

//
message UserInfo
{
	optional uint32 acc_id				= 1; //AccountID
	optional uint32 role_id 			= 2; //球员模型ID
	optional string name				= 3; //名称
	optional uint32 level				= 4; //等级
	optional uint32 position			= 5; //职业
	optional uint32 team_side			= 6; //主/客队
	optional uint32 room_pos			= 7; //模型在房间内的唯一ID
}

//通知进入房间内的成员信息
message NotifyRoomUser
{
	repeated UserInfo users				= 1; //房间内的成员信息列表
}

//通知退出房间的成员信息
message NotifyRoomUserExit
{
	optional UserInfo users				= 1; //退出房间的成员信息
}

//C <--> S
//向场景中的其他玩家通知自身的信息
message BroadcastSelfInfo
{
	required uint32 			acc_id			= 1; //AccountID
	required uint32 			char_id			= 2; //球员ID
	required CharacterState 	eState			= 3;
	required AnimType      		eStateType      = 4;
	required uint32				withBall		= 5; //0:false,1:true
	optional double				actionTime		= 6;
	optional double				ballTime		= 7;
	optional SVector3 			pos 			= 8;
	optional uint32 			dir				= 9;
	optional double 			rotate 			= 10;
}